$NetBSD$
--- net/gethostbyaddr.c-	Tue Mar 28 08:57:41 2000
+++ net/gethostbyaddr.c	Tue Mar 28 08:56:04 2000
@@ -124,8 +124,8 @@
 			/* Fill in our own address list. */
 			result->h_addrtype = type;
 			result->h_length = len;
-			result->h_addr_list = (char **) ALIGN(buf, char *);
-			result->h_addr_list[0] = ALIGN(&result->h_addr_list[2],
+			result->h_addr_list = (char **) THREAD_ALIGN(buf, char *);
+			result->h_addr_list[0] = THREAD_ALIGN(&result->h_addr_list[2],
 										   struct in_addr);
 			result->h_addr_list[1] = NULL;
 			break;
--- net/gethostbyname.c-	Tue Mar 28 08:57:41 2000
+++ net/gethostbyname.c	Tue Mar 28 08:56:04 2000
@@ -124,10 +124,10 @@
 	/* Copy faked name and address into buffer. */
 	strcpy(buf, hostname);
 	name = buf;
-	buf = ALIGN(buf + len + 1, addr);
+	buf = THREAD_ALIGN(buf + len + 1, addr);
 	*((struct in_addr *) buf) = addr;
 	addr_ptr = buf;
-	buf = ALIGN(buf + sizeof(addr), char *);
+	buf = THREAD_ALIGN(buf + sizeof(addr), char *);
 	((char **) buf)[0] = addr_ptr;
 	((char **) buf)[1] = NULL;
 	((char **) buf)[2] = NULL;
--- net/gethostent.c-	Tue Mar 28 08:57:41 2000
+++ net/gethostent.c	Tue Mar 28 08:56:04 2000
@@ -117,12 +117,12 @@
 			errno = ERANGE;
 			break;
 		}
-		addr = (struct in_addr *) ALIGN(buf + l, struct in_addr);
+		addr = (struct in_addr *) THREAD_ALIGN(buf + l, struct in_addr);
 		if (inet_aton(buf, addr) == 0)
 			continue;
 		result->h_length = sizeof(*addr);
 		result->h_addrtype = AF_INET;
-		result->h_addr_list = (char **) ALIGN(addr + sizeof(*addr), char *);
+		result->h_addr_list = (char **) THREAD_ALIGN(addr + sizeof(*addr), char *);
 		result->h_addr_list[0] = (char *) addr;
 		result->h_addr_list[1] = NULL;
 		result->h_aliases = result->h_addr_list + 2;
--- net/getnetent.c-	Tue Mar 28 08:57:41 2000
+++ net/getnetent.c	Tue Mar 28 08:56:04 2000
@@ -112,7 +112,7 @@
 		}
 		result->n_net = inet_network(p);
 		result->n_addrtype = AF_INET;
-		result->n_aliases = (char **) ALIGN(buf + l, char *);
+		result->n_aliases = (char **) THREAD_ALIGN(buf + l, char *);
 		alias = result->n_aliases;
 		if (q != NULL) {
 			p = q;
--- net/getprotoent.c-	Tue Mar 28 08:57:41 2000
+++ net/getprotoent.c	Tue Mar 28 08:56:04 2000
@@ -110,7 +110,7 @@
 			break;
 		}
 		result->p_proto = atoi(p);
-		result->p_aliases = (char **) ALIGN(buf + l, char *);
+		result->p_aliases = (char **) THREAD_ALIGN(buf + l, char *);
 		alias = result->p_aliases;
 		if (q != NULL) {
 			p = q;
--- net/getservent.c-	Tue Mar 28 08:57:41 2000
+++ net/getservent.c	Tue Mar 28 08:56:04 2000
@@ -112,7 +112,7 @@
 		}
 		result->s_port = htons((u_short)atoi(q));
 		result->s_proto = p;
-		result->s_aliases = (char **) ALIGN(buf + l, char *);
+		result->s_aliases = (char **) THREAD_ALIGN(buf + l, char *);
 		alias = result->s_aliases;
 		p = strpbrk(p, " \t");
 		if (p != NULL)
--- net/net_internal.h-	Tue Mar 28 08:57:42 2000
+++ net/net_internal.h	Tue Mar 28 08:56:04 2000
@@ -44,8 +44,8 @@
 #include <resolv.h>
 
 #define NET_BUFSIZE 4096
-#define ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
-#define SP(p, t, n) (ALIGN(p, t) + (n) * sizeof(t))
+#define THREAD_ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
+#define SP(p, t, n) (THREAD_ALIGN(p, t) + (n) * sizeof(t))
 
 extern pthread_mutex_t net_iterate_lock;
 
--- net/proto_internal.h-	Tue Mar 28 08:57:42 2000
+++ net/proto_internal.h	Tue Mar 28 08:56:05 2000
@@ -44,8 +44,8 @@
 #include <resolv.h>
 
 #define PROTO_BUFSIZE 4096
-#define ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
-#define SP(p, t, n) (ALIGN(p, t) + (n) * sizeof(t))
+#define THREAD_ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
+#define SP(p, t, n) (THREAD_ALIGN(p, t) + (n) * sizeof(t))
 
 extern pthread_mutex_t proto_iterate_lock;
 
--- net/res_internal.c-	Tue Mar 28 08:57:42 2000
+++ net/res_internal.c	Tue Mar 28 08:56:05 2000
@@ -175,7 +175,7 @@
 				bp += strlen(bp) + 1;
 			}
 		}
-		bp = ALIGN(bp, in_addr_t);
+		bp = THREAD_ALIGN(bp, in_addr_t);
 		if (bp + n >= buf + bufsize) {
 			errno = ERANGE;
 			return NULL;
@@ -198,7 +198,7 @@
 			errno = ERANGE;
 			return NULL;
 		}
-		result->h_addr_list = (char **) ALIGN(bp, char *);
+		result->h_addr_list = (char **) THREAD_ALIGN(bp, char *);
 		memcpy(result->h_addr_list, addrs, (hap - addrs) * sizeof(char *));
 		result->h_aliases = result->h_addr_list + (hap - addrs);
 		memcpy(result->h_aliases, aliases, (ap - aliases) * sizeof(char *));
--- net/res_internal.h-	Tue Mar 28 08:57:42 2000
+++ net/res_internal.h	Tue Mar 28 08:56:05 2000
@@ -44,8 +44,8 @@
 #include <resolv.h>
 
 #define HOST_BUFSIZE 4096
-#define ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
-#define SP(p, t, n) (ALIGN(p, t) + (n) * sizeof(t))
+#define THREAD_ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
+#define SP(p, t, n) (THREAD_ALIGN(p, t) + (n) * sizeof(t))
 
 struct	res_data {
 	char *buf;
--- net/serv_internal.h-	Tue Mar 28 08:57:42 2000
+++ net/serv_internal.h	Tue Mar 28 08:56:05 2000
@@ -44,8 +44,8 @@
 #include <resolv.h>
 
 #define SERV_BUFSIZE 4096
-#define ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
-#define SP(p, t, n) (ALIGN(p, t) + (n) * sizeof(t))
+#define THREAD_ALIGN(p, t) ((char *)(((((long)(p) - 1) / sizeof(t)) + 1) * sizeof(t)))
+#define SP(p, t, n) (THREAD_ALIGN(p, t) + (n) * sizeof(t))
 
 extern pthread_mutex_t serv_iterate_lock;
 
