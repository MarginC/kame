$NetBSD$
--- qw_common/net_udp.c.orig	Thu Jan 13 13:01:30 2000
+++ qw_common/net_udp.c	Tue Feb  1 10:13:50 2000
@@ -73,11 +73,9 @@
 #else
 typedef struct sockaddr_in6 sockaddress_t;
 #ifdef __sun__
-#define s6_addr32       _S6_un._S6_u32
+#define ss_family	__ss_family
+#define ss_len	__ss_len
 #endif __sun__
-#ifdef __FreeBSD__
-#define s6_addr32       __u6_addr.__u6_addr32
-#endif __FreeBSD__
 
 #endif AF_INET6
 
@@ -109,10 +107,7 @@
 	//	s->sin6_family = a->family;
 
 	s->sin6_family = AF_UNSPEC;
-	s->sin6_addr.s6_addr32[0] = a->ip[0];
-	s->sin6_addr.s6_addr32[1] = a->ip[1];
-	s->sin6_addr.s6_addr32[2] = a->ip[2];
-	s->sin6_addr.s6_addr32[3] = a->ip[3];
+	memcpy(&s->sin6_addr, a->ip, sizeof(s->sin6_addr));
 	s->sin6_port = a->port;
 	s->sin6_len = sizeof(struct sockaddr_in6);
 #endif
@@ -124,10 +119,7 @@
 	*(int *)&a->ip = *(int *)&s->sin_addr;
 	a->port = s->sin_port;
 #else
-	a->ip[0] = s->sin6_addr.s6_addr32[0];
-	a->ip[1] = s->sin6_addr.s6_addr32[1];
-	a->ip[2] = s->sin6_addr.s6_addr32[2];
-	a->ip[3] = s->sin6_addr.s6_addr32[3];
+	memcpy(a->ip, &s->sin6_addr, sizeof(s->sin6_addr));
 	a->port = s->sin6_port;
 	a->family = s->sin6_family;
 #endif
@@ -182,9 +174,9 @@
 	static  char    s[BUFSIZ];
 	struct sockaddr_storage ss;
 
-	ss.__ss_len = sizeof(ss);
-	ss.__ss_family = AF_UNSPEC;
-	memcpy(ss.__ss_pad1, &(a.ip), sizeof(a.ip));
+	ss.ss_len = sizeof(ss);
+	ss.ss_family = AF_UNSPEC;
+	memcpy(((char *)&ss) + 2, &(a.ip), sizeof(a.ip));
 	if (getnameinfo((struct sockaddr *) &ss,sizeof(ss),s,sizeof(s),NULL,0,NI_NUMERICHOST)) {
 		strcpy(s,"<invalid>");
 	}
@@ -282,10 +274,9 @@
           ss6=(struct sockaddr_in6 *) &ss;
           ss4=(struct sockaddr_in *) resultp->ai_addr;
           ss6->sin6_family=AF_INET6;
-          ss6->sin6_addr.s6_addr32[0]=0;
-          ss6->sin6_addr.s6_addr32[1]=0;
-          ss6->sin6_addr.s6_addr32[2]=htonl(0xffff);
-          ss6->sin6_addr.s6_addr32[3]=ss4->sin_addr.s_addr;
+	  memset(&ss6->sin6_addr, 0, sizeof(ss6->sin6_addr));
+          ss6->sin6_addr.s6_addr[10] = ss6->sin6_addr.s6_addr[11] = 0xff;
+	  memcpy(&ss6->sin6_addr.s6_addr[12], &ss4->sin_addr, sizeof(ss4->sin_addr));
           break;
         case AF_INET6:
           memcpy(&ss,resultp->ai_addr,sizeof(struct sockaddr_in6));
