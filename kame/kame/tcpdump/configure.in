dnl @(#) $Header: /cvsroot/kame/kame/kame/kame/tcpdump/configure.in,v 1.2 1999/09/11 04:45:11 itojun Exp $ (LBL)
dnl
dnl Copyright (c) 1994, 1995, 1996, 1997
dnl	The Regents of the University of California.  All rights reserved.
dnl
dnl Process this file with autoconf to produce a configure script.
dnl

AC_INIT(tcpdump.c)

AC_CANONICAL_SYSTEM

umask 002

if test -z "$PWD" ; then
	PWD=`pwd`
fi

AC_LBL_C_INIT(V_CCOPT, V_INCLS)

AC_CHECK_HEADERS(fcntl.h malloc.h memory.h rpc/rpcent.h)
AC_HEADER_TIME

case "$target_os" in

linux*)
	AC_MSG_CHECKING(Linux kernel version)
	AC_CACHE_VAL(ac_cv_linux_vers,
	    ac_cv_linux_vers=`uname -r 2>&1 | \
		sed -n -e '$s/.* //' -e '$s/\..*//p'`)
	AC_MSG_RESULT($ac_cv_linux_vers)
	if test $ac_cv_linux_vers -lt 2 ; then
		AC_MSG_ERROR(version 2 or higher required; see the INSTALL doc for more info)
	fi
	AC_DEFINE(HAVE_NET_SLIP_H)
	;;

*)
	AC_CHECK_HEADERS(net/slip.h)
	;;
esac

AC_MSG_CHECKING(if --enable-ipv6 option is specified)
AC_ARG_ENABLE(ipv6, [  --enable-ipv6           build IPv6-capable version])
AC_MSG_RESULT(${enable_ipv6-no})
if test "$enable_ipv6" = "yes"; then
	AC_DEFINE(INET6)
	LOCALSRC="print-ip6.c print-ip6opts.c print-ripng.c print-icmp6.c print-frag6.c print-rt6.c print-ospf6.c print-dhcp6.c $LOCALSRC"
	LIBS="$LIBS -L../libinet6 -L../libinet6/obj -L/usr/local/v6/lib"
	AC_CHECK_FUNCS(getaddrinfo,, AC_CHECK_LIB(inet6, getaddrinfo))
fi

dnl check sin_len of sockaddr_in
AC_MSG_CHECKING(whether struct sockaddr_in has a sin_len field)
AC_TRY_COMPILE([#include <sys/types.h>
#include <netinet/in.h>
],[static struct sockaddr_in ac_i;int ac_j = sizeof (ac_i.sin_len);],
[AC_MSG_RESULT(yes)
 AC_DEFINE(HAVE_SIN_LEN)],
  AC_MSG_RESULT(no))

dnl check sin6_len of sockaddr_in
AC_MSG_CHECKING(whether struct sockaddr_in6 has a sin6_len field)
AC_TRY_COMPILE([#include <sys/types.h>
#include <netinet/in.h>
],[static struct sockaddr_in6 ac_i;int ac_j = sizeof (ac_i.sin6_len);],
[AC_MSG_RESULT(yes)
 AC_DEFINE(HAVE_SIN6_LEN)],
  AC_MSG_RESULT(no))

AC_REPLACE_FUNCS(vfprintf strcasecmp)
AC_CHECK_FUNCS(ether_ntoa setlinebuf)

dnl The following generates a warning from autoconf...
AC_C_BIGENDIAN

AC_CHECK_LIB(dnet, main)
AC_CHECK_LIB(rpc, main)
AC_CHECK_LIB(z, uncompress)
AC_CHECK_HEADERS(zlib.h netinet6/ipcomp.h)

AC_LBL_TYPE_SIGNAL

AC_LBL_LIBPCAP(V_PCAPDEP, V_INCLS)

V_GROUP=0
if test -f /etc/group -a ! -z "`grep '^wheel:' /etc/group`" ; then
	V_GROUP=wheel
fi
case "$target_os" in

aix*)
	dnl Workaround to enable certain features
	AC_DEFINE(_SUN)
	;;

irix*)
	V_GROUP=sys
	;;

linux*)
	V_INCLS="$V_INCLS -Ilinux-include"
	;;

osf*)
	V_GROUP=system
	dnl Workaround around ip_hl vs. ip_vhl problem in netinet/ip.h
	AC_DEFINE(__STDC__,2)
	;;

solaris*)
	V_GROUP=sys
	;;
esac

if test -f /dev/bpf0 ; then
	V_GROUP=bpf
fi

AC_LBL_CHECK_TYPE(int32_t, int)
AC_LBL_CHECK_TYPE(u_int32_t, u_int)

AC_LBL_DEVEL(V_CCOPT)

AC_LBL_SOCKADDR_SA_LEN

AC_MSG_CHECKING(if ether_header uses ether_addr structs)
AC_CACHE_VAL(ac_cv_ether_header_has_ea,
    LBL_SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $V_INCLS"
    AC_TRY_COMPILE([
#	include <sys/types.h>
#	if __STDC__
	/* osf3 has REALLY good prototyes */
	struct mbuf;
	struct rtentry;
#	endif
#	include <sys/socket.h>
#	include <net/if.h>
#	include <netinet/in.h>
#	include <netinet/if_ether.h>],
	[u_int i =
	    sizeof(((struct ether_header *)0)->ether_dhost.ether_addr_octet)],
	ac_cv_ether_header_has_ea=yes,
	ac_cv_ether_header_has_ea=no)
    CFLAGS="$LBL_SAVE_CFLAGS")
AC_MSG_RESULT($ac_cv_ether_header_has_ea)
if test $ac_cv_ether_header_has_ea = yes ; then
	AC_DEFINE(ETHER_HEADER_HAS_EA)
fi

AC_MSG_CHECKING(if ether_arp uses ether_addr structs)
AC_CACHE_VAL(ac_cv_ether_arp_has_ea,
    LBL_SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $V_INCLS"
    AC_TRY_COMPILE([
#	include <sys/types.h>
#	if __STDC__
	/* osf3 has REALLY good prototyes */
	struct mbuf;
	struct rtentry;
#	endif
#	include <sys/socket.h>
#	include <net/if.h>
#	include <netinet/in.h>
#	include <netinet/if_ether.h>],
	[u_int i =
	    sizeof(((struct ether_arp *)0)->arp_sha.ether_addr_octet)],
	ac_cv_ether_arp_has_ea=yes,
	ac_cv_ether_arp_has_ea=no)
    CFLAGS="$LBL_SAVE_CFLAGS")
AC_MSG_RESULT($ac_cv_ether_arp_has_ea)
if test $ac_cv_ether_arp_has_ea = yes ; then
	AC_DEFINE(ETHER_ARP_HAS_EA)
fi

AC_MSG_CHECKING(if ether_arp uses erp_xsha member)
AC_CACHE_VAL(ac_cv_struct_ether_arp_x,
    LBL_SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $V_INCLS"
    AC_TRY_COMPILE([
#	include <sys/types.h>
#	include <sys/socket.h>
#	if __STDC__
	/* osf3 has REALLY good prototyes */
	struct mbuf;
	struct rtentry;
#	endif
#	include <net/if.h>
#	include <netinet/in.h>
#	include <netinet/if_ether.h>],
	[u_int i = sizeof( ((struct ether_arp *)0)->arp_xsha)],
	ac_cv_struct_ether_arp_x=yes,
	ac_cv_struct_ether_arp_x=no)
    CFLAGS="$LBL_SAVE_CFLAGS")
AC_MSG_RESULT($ac_cv_struct_ether_arp_x)
if test $ac_cv_struct_ether_arp_x = yes ; then
	AC_DEFINE(ETHER_ARP_HAS_X)
fi

AC_LBL_UNALIGNED_ACCESS

AC_MSG_CHECKING(for SSLeay)
ac_cv_ssleay_path=no
incdir=no
for dir in /usr/local /usr/local/ssl /usr/pkg; do
	if test -d $dir/lib -a -f $dir/lib/libcrypto.a; then
		ac_cv_ssleay_path=$dir
	fi
	if test -d $dir/include -a -f $dir/include/des.h; then
		incdir="-I$dir/include"
	else
		if test -d $dir/include/ssleay -a -f $dir/include/ssleay/des.h; then
			incdir="-I$dir/include/ssleay"
		elif test -d $dir/include/openssl -a -f $dir/include/openssl/des.h; then
			incdir="-I$dir/include -I$dir/include/openssl"
		fi
	fi
	if test "$ac_cv_ssleay_path" != "no" -a "$incdir" != "no"; then
		break;
	else
		ac_cv_ssleay_path=no
		incdir=no
	fi
done
AC_MSG_RESULT($ac_cv_ssleay_path)
if test "$ac_cv_ssleay_path" != no; then
	V_INCLS="$V_INCLS $incdir"
	LIBS="$LIBS -L$dir/lib"
	AC_CHECK_LIB(crypto, des_cbc_encrypt)
	AC_DEFINE(CRYPTO)

	bak_CPPFLAGS=$CPPFLAGS
	CPPFLAGS="$CPPFLAGS $V_INCLS"
	AC_CHECK_HEADERS(cast.h rc5.h)

	if test "$ac_cv_header_cast_h" = "yes"; then
		AC_MSG_CHECKING(for buggy CAST128)
		AC_TRY_RUN(dnl
[
#include <cast.h>
main()
{
	unsigned char key[] = {0x01,0x23,0x45,0x67,0x12};
	unsigned char in[] = {0x01,0x23,0x45,0x67,0x89,0xAB,0xCD,0xEF};
	unsigned char out[sizeof(in)];
	unsigned char ok[] = {0x7A,0xC8,0x16,0xD1,0x6E,0x9B,0x30,0x2E};
	CAST_KEY ks;
	CAST_set_key(&ks, sizeof(key), key);
	CAST_ecb_encrypt(in, out, &ks, CAST_ENCRYPT);
	if (memcmp(out, ok, sizeof(ok)) != 0)
		return 0;
	else
		return 1;
}],
			[buggy_cast128=yes],
			[buggy_cast128=no],
			[buggy_cast128="cross-compiling, assume yes"])
		AC_MSG_RESULT($buggy_cast128)
		if test "$buggy_cast128" != no; then
			echo "NOTE: SSLeay 0.9.0b has a bug in CAST128 en/decoding routine."
			echo "disabling CAST128 support."
			AC_DEFINE(HAVE_BUGGY_CAST128)
		fi
	fi

	CPPFLAGS=$bak_CPPFLAGS
fi

if test "${srcdir}" = "." ; then
	srcdirprefix=""
else
	srcdirprefix="./"
fi

if test -r ${srcdirprefix}lbl/gnuc.h ; then
	rm -f gnuc.h
	ln -s ${srcdirprefix}lbl/gnuc.h gnuc.h
fi

AC_SUBST(V_CCOPT)
AC_SUBST(V_GROUP)
AC_SUBST(V_INCLS)
AC_SUBST(V_PCAPDEP)
AC_SUBST(LOCALSRC)

AC_PROG_INSTALL

AC_OUTPUT(Makefile)

if test -f .devel ; then
	make depend
fi
exit 0
